// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class C2G_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Login> _parser = new pb::MessageParser<C2G_Login>(() => (C2G_Login)MessagePool.Instance.Fetch(typeof(C2G_Login)));
    public static pb::MessageParser<C2G_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    /// <summary>
    /// 帐号
    /// </summary>
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Login> _parser = new pb::MessageParser<G2C_Login>(() => (G2C_Login)MessagePool.Instance.Fetch(typeof(G2C_Login)));
    public static pb::MessageParser<G2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool loginFail_;
    public bool LoginFail {
      get { return loginFail_; }
      set {
        loginFail_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginFail != false) {
        output.WriteRawTag(16);
        output.WriteBool(LoginFail);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (LoginFail != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      loginFail_ = false;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            LoginFail = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_Reg : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Reg> _parser = new pb::MessageParser<C2G_Reg>(() => (C2G_Reg)MessagePool.Instance.Fetch(typeof(C2G_Reg)));
    public static pb::MessageParser<C2G_Reg> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    /// <summary>
    /// 帐号
    /// </summary>
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Reg : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Reg> _parser = new pb::MessageParser<G2C_Reg>(() => (G2C_Reg)MessagePool.Instance.Fetch(typeof(G2C_Reg)));
    public static pb::MessageParser<G2C_Reg> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool regFail_;
    public bool RegFail {
      get { return regFail_; }
      set {
        regFail_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RegFail != false) {
        output.WriteRawTag(16);
        output.WriteBool(RegFail);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RegFail != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      regFail_ = false;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            RegFail = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerBackLogin : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerBackLogin> _parser = new pb::MessageParser<G2C_PlayerBackLogin>(() => (G2C_PlayerBackLogin)MessagePool.Instance.Fetch(typeof(G2C_PlayerBackLogin)));
    public static pb::MessageParser<G2C_PlayerBackLogin> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string netMessage_ = "";
    public string NetMessage {
      get { return netMessage_; }
      set {
        netMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NetMessage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NetMessage);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (NetMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetMessage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      netMessage_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NetMessage = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetPlayerInfo> _parser = new pb::MessageParser<C2G_GetPlayerInfo>(() => (C2G_GetPlayerInfo)MessagePool.Instance.Fetch(typeof(C2G_GetPlayerInfo)));
    public static pb::MessageParser<C2G_GetPlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_GetPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetPlayerInfo> _parser = new pb::MessageParser<G2C_GetPlayerInfo>(() => (G2C_GetPlayerInfo)MessagePool.Instance.Fetch(typeof(G2C_GetPlayerInfo)));
    public static pb::MessageParser<G2C_GetPlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int killCount_;
    public int KillCount {
      get { return killCount_; }
      set {
        killCount_ = value;
      }
    }

    private int deathCount_;
    public int DeathCount {
      get { return deathCount_; }
      set {
        deathCount_ = value;
      }
    }

    private int moneyCount_;
    public int MoneyCount {
      get { return moneyCount_; }
      set {
        moneyCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (KillCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(KillCount);
      }
      if (DeathCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DeathCount);
      }
      if (MoneyCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MoneyCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (KillCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillCount);
      }
      if (DeathCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeathCount);
      }
      if (MoneyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoneyCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      killCount_ = 0;
      deathCount_ = 0;
      moneyCount_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            KillCount = input.ReadInt32();
            break;
          }
          case 16: {
            DeathCount = input.ReadInt32();
            break;
          }
          case 24: {
            MoneyCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_RequestEnterMap : pb::IMessage {
    private static readonly pb::MessageParser<C2G_RequestEnterMap> _parser = new pb::MessageParser<C2G_RequestEnterMap>(() => (C2G_RequestEnterMap)MessagePool.Instance.Fetch(typeof(C2G_RequestEnterMap)));
    public static pb::MessageParser<C2G_RequestEnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_RequestEnterMap : pb::IMessage {
    private static readonly pb::MessageParser<G2C_RequestEnterMap> _parser = new pb::MessageParser<G2C_RequestEnterMap>(() => (G2C_RequestEnterMap)MessagePool.Instance.Fetch(typeof(G2C_RequestEnterMap)));
    public static pb::MessageParser<G2C_RequestEnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PositionX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionZ);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PositionX = input.ReadFloat();
            break;
          }
          case 21: {
            PositionY = input.ReadFloat();
            break;
          }
          case 29: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerRoleNetwork : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerRoleNetwork> _parser = new pb::MessageParser<C2G_PlayerRoleNetwork>(() => (C2G_PlayerRoleNetwork)MessagePool.Instance.Fetch(typeof(C2G_PlayerRoleNetwork)));
    public static pb::MessageParser<C2G_PlayerRoleNetwork> Parser { get { return _parser; } }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    private float rotationX_;
    public float RotationX {
      get { return rotationX_; }
      set {
        rotationX_ = value;
      }
    }

    private float rotationY_;
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    private float rotationZ_;
    public float RotationZ {
      get { return rotationZ_; }
      set {
        rotationZ_ = value;
      }
    }

    private float rotationW_;
    public float RotationW {
      get { return rotationW_; }
      set {
        rotationW_ = value;
      }
    }

    private float velocityX_;
    public float VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    private float velocityY_;
    public float VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    private float velocityZ_;
    public float VelocityZ {
      get { return velocityZ_; }
      set {
        velocityZ_ = value;
      }
    }

    private bool fire_;
    public bool Fire {
      get { return fire_; }
      set {
        fire_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.BulletInfo> _repeated_bullets_codec
        = pb::FieldCodec.ForMessage(106, global::ETHotfix.BulletInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.BulletInfo> bullets_ = new pbc::RepeatedField<global::ETHotfix.BulletInfo>();
    public pbc::RepeatedField<global::ETHotfix.BulletInfo> Bullets {
      get { return bullets_; }
      set { bullets_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionZ);
      }
      if (RotationX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RotationX);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotationY);
      }
      if (RotationZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RotationZ);
      }
      if (RotationW != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotationW);
      }
      if (VelocityX != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(VelocityX);
      }
      if (VelocityY != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(VelocityY);
      }
      if (VelocityZ != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(VelocityZ);
      }
      if (Fire != false) {
        output.WriteRawTag(96);
        output.WriteBool(Fire);
      }
      bullets_.WriteTo(output, _repeated_bullets_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (RotationX != 0F) {
        size += 1 + 4;
      }
      if (RotationY != 0F) {
        size += 1 + 4;
      }
      if (RotationZ != 0F) {
        size += 1 + 4;
      }
      if (RotationW != 0F) {
        size += 1 + 4;
      }
      if (VelocityX != 0F) {
        size += 1 + 4;
      }
      if (VelocityY != 0F) {
        size += 1 + 4;
      }
      if (VelocityZ != 0F) {
        size += 1 + 4;
      }
      if (Fire != false) {
        size += 1 + 1;
      }
      size += bullets_.CalculateSize(_repeated_bullets_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      rotationX_ = 0f;
      rotationY_ = 0f;
      rotationZ_ = 0f;
      rotationW_ = 0f;
      velocityX_ = 0f;
      velocityY_ = 0f;
      velocityZ_ = 0f;
      fire_ = false;
      for (int i = 0; i < bullets_.Count; i++) { MessagePool.Instance.Recycle(bullets_[i]); }
      bullets_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 37: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 45: {
            RotationX = input.ReadFloat();
            break;
          }
          case 53: {
            RotationY = input.ReadFloat();
            break;
          }
          case 61: {
            RotationZ = input.ReadFloat();
            break;
          }
          case 69: {
            RotationW = input.ReadFloat();
            break;
          }
          case 77: {
            VelocityX = input.ReadFloat();
            break;
          }
          case 85: {
            VelocityY = input.ReadFloat();
            break;
          }
          case 93: {
            VelocityZ = input.ReadFloat();
            break;
          }
          case 96: {
            Fire = input.ReadBool();
            break;
          }
          case 106: {
            bullets_.AddEntriesFrom(input, _repeated_bullets_codec);
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetOtherPlayer : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetOtherPlayer> _parser = new pb::MessageParser<C2G_GetOtherPlayer>(() => (C2G_GetOtherPlayer)MessagePool.Instance.Fetch(typeof(C2G_GetOtherPlayer)));
    public static pb::MessageParser<C2G_GetOtherPlayer> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_OtherPlayerEnterMap : pb::IMessage {
    private static readonly pb::MessageParser<G2C_OtherPlayerEnterMap> _parser = new pb::MessageParser<G2C_OtherPlayerEnterMap>(() => (G2C_OtherPlayerEnterMap)MessagePool.Instance.Fetch(typeof(G2C_OtherPlayerEnterMap)));
    public static pb::MessageParser<G2C_OtherPlayerEnterMap> Parser { get { return _parser; } }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionZ);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 37: {
            PositionZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_OtherPlayerPosition : pb::IMessage {
    private static readonly pb::MessageParser<G2C_OtherPlayerPosition> _parser = new pb::MessageParser<G2C_OtherPlayerPosition>(() => (G2C_OtherPlayerPosition)MessagePool.Instance.Fetch(typeof(G2C_OtherPlayerPosition)));
    public static pb::MessageParser<G2C_OtherPlayerPosition> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_dirAccount_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> dirAccount_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> DirAccount {
      get { return dirAccount_; }
      set { dirAccount_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_positionX_codec
        = pb::FieldCodec.ForFloat(18);
    private pbc::RepeatedField<float> positionX_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> PositionX {
      get { return positionX_; }
      set { positionX_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_positionY_codec
        = pb::FieldCodec.ForFloat(26);
    private pbc::RepeatedField<float> positionY_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> PositionY {
      get { return positionY_; }
      set { positionY_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_positionZ_codec
        = pb::FieldCodec.ForFloat(34);
    private pbc::RepeatedField<float> positionZ_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> PositionZ {
      get { return positionZ_; }
      set { positionZ_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_rotationX_codec
        = pb::FieldCodec.ForFloat(42);
    private pbc::RepeatedField<float> rotationX_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> RotationX {
      get { return rotationX_; }
      set { rotationX_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_rotationY_codec
        = pb::FieldCodec.ForFloat(50);
    private pbc::RepeatedField<float> rotationY_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> RotationY {
      get { return rotationY_; }
      set { rotationY_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_rotationZ_codec
        = pb::FieldCodec.ForFloat(58);
    private pbc::RepeatedField<float> rotationZ_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> RotationZ {
      get { return rotationZ_; }
      set { rotationZ_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_rotationW_codec
        = pb::FieldCodec.ForFloat(66);
    private pbc::RepeatedField<float> rotationW_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> RotationW {
      get { return rotationW_; }
      set { rotationW_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_velocityX_codec
        = pb::FieldCodec.ForFloat(74);
    private pbc::RepeatedField<float> velocityX_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> VelocityX {
      get { return velocityX_; }
      set { velocityX_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_velocityY_codec
        = pb::FieldCodec.ForFloat(82);
    private pbc::RepeatedField<float> velocityY_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> VelocityY {
      get { return velocityY_; }
      set { velocityY_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_velocityZ_codec
        = pb::FieldCodec.ForFloat(90);
    private pbc::RepeatedField<float> velocityZ_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> VelocityZ {
      get { return velocityZ_; }
      set { velocityZ_ = value; }
    }

    private long serverTime_;
    public long ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<bool> _repeated_fire_codec
        = pb::FieldCodec.ForBool(106);
    private pbc::RepeatedField<bool> fire_ = new pbc::RepeatedField<bool>();
    public pbc::RepeatedField<bool> Fire {
      get { return fire_; }
      set { fire_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.BulletInfo> _repeated_bullets_codec
        = pb::FieldCodec.ForMessage(114, global::ETHotfix.BulletInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.BulletInfo> bullets_ = new pbc::RepeatedField<global::ETHotfix.BulletInfo>();
    public pbc::RepeatedField<global::ETHotfix.BulletInfo> Bullets {
      get { return bullets_; }
      set { bullets_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dirAccount_.WriteTo(output, _repeated_dirAccount_codec);
      positionX_.WriteTo(output, _repeated_positionX_codec);
      positionY_.WriteTo(output, _repeated_positionY_codec);
      positionZ_.WriteTo(output, _repeated_positionZ_codec);
      rotationX_.WriteTo(output, _repeated_rotationX_codec);
      rotationY_.WriteTo(output, _repeated_rotationY_codec);
      rotationZ_.WriteTo(output, _repeated_rotationZ_codec);
      rotationW_.WriteTo(output, _repeated_rotationW_codec);
      velocityX_.WriteTo(output, _repeated_velocityX_codec);
      velocityY_.WriteTo(output, _repeated_velocityY_codec);
      velocityZ_.WriteTo(output, _repeated_velocityZ_codec);
      if (ServerTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(ServerTime);
      }
      fire_.WriteTo(output, _repeated_fire_codec);
      bullets_.WriteTo(output, _repeated_bullets_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += dirAccount_.CalculateSize(_repeated_dirAccount_codec);
      size += positionX_.CalculateSize(_repeated_positionX_codec);
      size += positionY_.CalculateSize(_repeated_positionY_codec);
      size += positionZ_.CalculateSize(_repeated_positionZ_codec);
      size += rotationX_.CalculateSize(_repeated_rotationX_codec);
      size += rotationY_.CalculateSize(_repeated_rotationY_codec);
      size += rotationZ_.CalculateSize(_repeated_rotationZ_codec);
      size += rotationW_.CalculateSize(_repeated_rotationW_codec);
      size += velocityX_.CalculateSize(_repeated_velocityX_codec);
      size += velocityY_.CalculateSize(_repeated_velocityY_codec);
      size += velocityZ_.CalculateSize(_repeated_velocityZ_codec);
      if (ServerTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
      }
      size += fire_.CalculateSize(_repeated_fire_codec);
      size += bullets_.CalculateSize(_repeated_bullets_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      dirAccount_.Clear();
      positionX_.Clear();
      positionY_.Clear();
      positionZ_.Clear();
      rotationX_.Clear();
      rotationY_.Clear();
      rotationZ_.Clear();
      rotationW_.Clear();
      velocityX_.Clear();
      velocityY_.Clear();
      velocityZ_.Clear();
      serverTime_ = 0;
      fire_.Clear();
      for (int i = 0; i < bullets_.Count; i++) { MessagePool.Instance.Recycle(bullets_[i]); }
      bullets_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            dirAccount_.AddEntriesFrom(input, _repeated_dirAccount_codec);
            break;
          }
          case 18:
          case 21: {
            positionX_.AddEntriesFrom(input, _repeated_positionX_codec);
            break;
          }
          case 26:
          case 29: {
            positionY_.AddEntriesFrom(input, _repeated_positionY_codec);
            break;
          }
          case 34:
          case 37: {
            positionZ_.AddEntriesFrom(input, _repeated_positionZ_codec);
            break;
          }
          case 42:
          case 45: {
            rotationX_.AddEntriesFrom(input, _repeated_rotationX_codec);
            break;
          }
          case 50:
          case 53: {
            rotationY_.AddEntriesFrom(input, _repeated_rotationY_codec);
            break;
          }
          case 58:
          case 61: {
            rotationZ_.AddEntriesFrom(input, _repeated_rotationZ_codec);
            break;
          }
          case 66:
          case 69: {
            rotationW_.AddEntriesFrom(input, _repeated_rotationW_codec);
            break;
          }
          case 74:
          case 77: {
            velocityX_.AddEntriesFrom(input, _repeated_velocityX_codec);
            break;
          }
          case 82:
          case 85: {
            velocityY_.AddEntriesFrom(input, _repeated_velocityY_codec);
            break;
          }
          case 90:
          case 93: {
            velocityZ_.AddEntriesFrom(input, _repeated_velocityZ_codec);
            break;
          }
          case 96: {
            ServerTime = input.ReadInt64();
            break;
          }
          case 106:
          case 104: {
            fire_.AddEntriesFrom(input, _repeated_fire_codec);
            break;
          }
          case 114: {
            bullets_.AddEntriesFrom(input, _repeated_bullets_codec);
            break;
          }
        }
      }
    }

  }

  public partial class BulletInfo : pb::IMessage {
    private static readonly pb::MessageParser<BulletInfo> _parser = new pb::MessageParser<BulletInfo>(() => (BulletInfo)MessagePool.Instance.Fetch(typeof(BulletInfo)));
    public static pb::MessageParser<BulletInfo> Parser { get { return _parser; } }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    private float rotationX_;
    public float RotationX {
      get { return rotationX_; }
      set {
        rotationX_ = value;
      }
    }

    private float rotationY_;
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    private float rotationZ_;
    public float RotationZ {
      get { return rotationZ_; }
      set {
        rotationZ_ = value;
      }
    }

    private float rotationW_;
    public float RotationW {
      get { return rotationW_; }
      set {
        rotationW_ = value;
      }
    }

    private float velocityX_;
    public float VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    private float velocityY_;
    public float VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    private float velocityZ_;
    public float VelocityZ {
      get { return velocityZ_; }
      set {
        velocityZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionZ);
      }
      if (RotationX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RotationX);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotationY);
      }
      if (RotationZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RotationZ);
      }
      if (RotationW != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotationW);
      }
      if (VelocityX != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(VelocityX);
      }
      if (VelocityY != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(VelocityY);
      }
      if (VelocityZ != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(VelocityZ);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (RotationX != 0F) {
        size += 1 + 4;
      }
      if (RotationY != 0F) {
        size += 1 + 4;
      }
      if (RotationZ != 0F) {
        size += 1 + 4;
      }
      if (RotationW != 0F) {
        size += 1 + 4;
      }
      if (VelocityX != 0F) {
        size += 1 + 4;
      }
      if (VelocityY != 0F) {
        size += 1 + 4;
      }
      if (VelocityZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      rotationX_ = 0f;
      rotationY_ = 0f;
      rotationZ_ = 0f;
      rotationW_ = 0f;
      velocityX_ = 0f;
      velocityY_ = 0f;
      velocityZ_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 37: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 45: {
            RotationX = input.ReadFloat();
            break;
          }
          case 53: {
            RotationY = input.ReadFloat();
            break;
          }
          case 61: {
            RotationZ = input.ReadFloat();
            break;
          }
          case 69: {
            RotationW = input.ReadFloat();
            break;
          }
          case 77: {
            VelocityX = input.ReadFloat();
            break;
          }
          case 85: {
            VelocityY = input.ReadFloat();
            break;
          }
          case 93: {
            VelocityZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerDisCatenate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerDisCatenate> _parser = new pb::MessageParser<G2C_PlayerDisCatenate>(() => (G2C_PlayerDisCatenate)MessagePool.Instance.Fetch(typeof(G2C_PlayerDisCatenate)));
    public static pb::MessageParser<G2C_PlayerDisCatenate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerHitOtherPlayer : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerHitOtherPlayer> _parser = new pb::MessageParser<C2G_PlayerHitOtherPlayer>(() => (C2G_PlayerHitOtherPlayer)MessagePool.Instance.Fetch(typeof(C2G_PlayerHitOtherPlayer)));
    public static pb::MessageParser<C2G_PlayerHitOtherPlayer> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int selfAccount_;
    public int SelfAccount {
      get { return selfAccount_; }
      set {
        selfAccount_ = value;
      }
    }

    private int hitPlayerAccount_;
    public int HitPlayerAccount {
      get { return hitPlayerAccount_; }
      set {
        hitPlayerAccount_ = value;
      }
    }

    private int subHealth_;
    public int SubHealth {
      get { return subHealth_; }
      set {
        subHealth_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SelfAccount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SelfAccount);
      }
      if (HitPlayerAccount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitPlayerAccount);
      }
      if (SubHealth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SubHealth);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (SelfAccount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfAccount);
      }
      if (HitPlayerAccount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitPlayerAccount);
      }
      if (SubHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubHealth);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      selfAccount_ = 0;
      hitPlayerAccount_ = 0;
      subHealth_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SelfAccount = input.ReadInt32();
            break;
          }
          case 16: {
            HitPlayerAccount = input.ReadInt32();
            break;
          }
          case 24: {
            SubHealth = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerHealthUpuate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerHealthUpuate> _parser = new pb::MessageParser<G2C_PlayerHealthUpuate>(() => (G2C_PlayerHealthUpuate)MessagePool.Instance.Fetch(typeof(G2C_PlayerHealthUpuate)));
    public static pb::MessageParser<G2C_PlayerHealthUpuate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int newHealth_;
    public int NewHealth {
      get { return newHealth_; }
      set {
        newHealth_ = value;
      }
    }

    private bool die_;
    public bool Die {
      get { return die_; }
      set {
        die_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NewHealth != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewHealth);
      }
      if (Die != false) {
        output.WriteRawTag(16);
        output.WriteBool(Die);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (NewHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewHealth);
      }
      if (Die != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      newHealth_ = 0;
      die_ = false;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewHealth = input.ReadInt32();
            break;
          }
          case 16: {
            Die = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_OtherPlayerDie : pb::IMessage {
    private static readonly pb::MessageParser<G2C_OtherPlayerDie> _parser = new pb::MessageParser<G2C_OtherPlayerDie>(() => (G2C_OtherPlayerDie)MessagePool.Instance.Fetch(typeof(G2C_OtherPlayerDie)));
    public static pb::MessageParser<G2C_OtherPlayerDie> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int diePlayerAccount_;
    public int DiePlayerAccount {
      get { return diePlayerAccount_; }
      set {
        diePlayerAccount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DiePlayerAccount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DiePlayerAccount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (DiePlayerAccount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiePlayerAccount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      diePlayerAccount_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DiePlayerAccount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerResurrection : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerResurrection> _parser = new pb::MessageParser<G2C_PlayerResurrection>(() => (G2C_PlayerResurrection)MessagePool.Instance.Fetch(typeof(G2C_PlayerResurrection)));
    public static pb::MessageParser<G2C_PlayerResurrection> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int resurrectionPlayerAccount_;
    public int ResurrectionPlayerAccount {
      get { return resurrectionPlayerAccount_; }
      set {
        resurrectionPlayerAccount_ = value;
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ResurrectionPlayerAccount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResurrectionPlayerAccount);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionZ);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ResurrectionPlayerAccount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResurrectionPlayerAccount);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      resurrectionPlayerAccount_ = 0;
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResurrectionPlayerAccount = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 37: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
